import { ICompoundInference } from '@store/inference-history-store/inference-history.model';
import { ModelPrecisionEnum, ModelPrecisionType, THROUGHPUT_UNIT } from '@store/model-store/model.model';

import { ExecutedLayerItem } from '../../modules/dashboard/components/model-layers-with-graphs/layers-table/layers-table.model';

export enum ExecutedModelLayers {
  CONVOLUTION = 'Convolution',
  REORDER = 'Reorder',
}

export interface ILayerTimePrecisionDistribution {
  layerType: string;
  execTime: number;
  total: number;
  runtimePrecisions: PrecisionDistributionType;
}

export type IRuntimePrecisionDistribution = {
  [key in ModelPrecisionEnum]?: {
    precision: ModelPrecisionType;
    transitions: number;
    execTime: number;
  };
};

export interface IPrecisionDistribution {
  precision: ModelPrecisionType;
  total: number;
  isDisplayed: boolean;
}

export type PrecisionDistributionType = {
  [key in ModelPrecisionEnum]?: number;
};

export type IPrecisionTransitions = {
  [key in ModelPrecisionEnum]?: {
    [precision in ModelPrecisionEnum]?: number;
  };
};
export interface ILayerTimePrecisionDistributionTableData extends ILayerTimePrecisionDistribution {
  isDisplayed: boolean;
}

export interface IComparisonLayerDistribution extends ILayerTimePrecisionDistribution {
  execTimeB: number;
  totalB: number;
  runtimePrecisionsB: PrecisionDistributionType;
  isDisplayed: boolean;
}

export interface IPrecisionAnalysisAdviceMessage {
  summary: string;
  nextSteps: string;
  theory?: string;
  opened?: boolean;
  testId?: string;
}

export interface IInferenceExecutionInfo {
  nireq: number;
  batch: number;
  isAutoBenchmark: boolean;
  autogenerated: boolean;
  latency: number;
  throughput: number;
  throughputUnit: THROUGHPUT_UNIT;
  totalExecutionTime: number;
}

export interface InferenceResultDTO {
  execInfo: IInferenceExecutionInfo;
  runtimeRepresentation: ExecutedLayerItem[];
  layerTimeDistribution: ILayerTimePrecisionDistribution[];
  runtimePrecisionsAvailable: boolean;
  precisionDistribution: IRuntimePrecisionDistribution;
  precisionTransitions: IPrecisionTransitions;
}

export interface CompoundJobForInferenceDTO {
  config: ICompoundInference;
  creationTimestamp: number;
  jobId: number;
  jobType: string;
  result: InferenceResultDTO;
  status: string;
}

export class InferenceResultModel implements InferenceResultDTO {
  jobId: number;
  inferenceResultId: number;
  execInfo: IInferenceExecutionInfo;
  runtimeRepresentation: ExecutedLayerItem[];
  runtimePrecisionsAvailable: boolean;
  layerTimeDistribution: ILayerTimePrecisionDistribution[];
  precisionDistribution: IRuntimePrecisionDistribution;
  precisionTransitions: IPrecisionTransitions;
  config: ICompoundInference;

  constructor(jobForInferenceDTO: CompoundJobForInferenceDTO, inferenceResultId) {
    this.jobId = jobForInferenceDTO.jobId;
    this.inferenceResultId = inferenceResultId;
    this.execInfo = jobForInferenceDTO.result.execInfo;
    this.config = jobForInferenceDTO.config;
    this.runtimeRepresentation = jobForInferenceDTO.result.runtimeRepresentation;
    this.layerTimeDistribution = jobForInferenceDTO.result.layerTimeDistribution;
    this.precisionDistribution = jobForInferenceDTO.result.precisionDistribution;
    this.precisionTransitions = jobForInferenceDTO.result.precisionTransitions;
    this.runtimePrecisionsAvailable = jobForInferenceDTO.result.runtimePrecisionsAvailable;
  }
}
