"""Dataset Augmentation Support

Revision ID: e870c437d2dc
Revises: 9af85a4ff36c
Create Date: 2021-04-23 14:13:14.110957

"""

"""
 OpenVINO DL Workbench
 Migration: Add support for dataset augmentation

 Copyright (c) 2020 Intel Corporation

 LEGAL NOTICE: Your use of this software and any required dependent software (the “Software Package”) is subject to
 the terms and conditions of the software license agreements for Software Package, which may also include
 notices, disclaimers, or license terms for third party or open source software
 included in or with the Software Package, and your use indicates your acceptance of all such terms.
 Please refer to the “third-party-programs.txt” or other similarly-named text file included with the Software Package
 for additional details.
 You may obtain a copy of the License at
      https://software.intel.com/content/dam/develop/external/us/en/documents/intel-openvino-license-agreements.pdf
"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
from migrations.utils import SQLEnumMigrator

revision = 'e870c437d2dc'
down_revision = '9af85a4ff36c'
branch_labels = None
depends_on = None

old_pipeline_stages = (
    'accuracy',
    'preparing_setup_assets',
    'uploading_setup_assets',
    'configuring_environment',
    'collecting_available_devices',
    'collecting_system_information',
    'preparing_profiling_assets',
    'preparing_int8_calibration_assets',
    'profiling',
    'getting_remote_job_result',
    'download_log',
    'int8_calibration',
    'remote_int8_calibration',
    'model_analyzer',
    'generate_dataset',
    'wait_dataset_upload',
    'extract_dataset',
    'recognize_dataset',
    'validate_dataset',
    'export_project_report',
    'export_inference_report',
    'inference_test_image',
    'winograd_tuning',
    'export_project',
    'model_optimizer_scan',
    'convert_model',
    'convert_keras_model',
    'wait_model_upload',
    'download_omz_model',
    'convert_omz_model',
    'move_omz_model',
)

new_pipeline_stages = (
    *old_pipeline_stages,
    'augment_dataset'
)

pipeline_stage_migrator = SQLEnumMigrator(
    table_column_pairs=(('job_execution_details', 'stage'),),
    enum_name='pipelinestageenum',
    from_types=old_pipeline_stages,
    to_types=new_pipeline_stages)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dataset_augmentation_jobs',
                    sa.Column('job_id', sa.Integer(), nullable=False),
                    sa.Column('dataset_id', sa.Integer(), nullable=False),
                    sa.Column('horizontal_flip', sa.Boolean(), nullable=False),
                    sa.Column('vertical_flip', sa.Boolean(), nullable=False),
                    sa.Column('apply_random_erase', sa.Boolean(), nullable=False),
                    sa.Column('erase_ratio', sa.Float(), nullable=True),
                    sa.Column('erase_images', sa.Integer(), nullable=True),
                    sa.Column('apply_noise_injection', sa.Boolean(), nullable=False),
                    sa.Column('noise_ratio', sa.Float(), nullable=True),
                    sa.Column('noise_images', sa.Integer(), nullable=True),
                    sa.Column('apply_image_corrections', sa.Boolean(), nullable=False),
                    sa.Column('image_corrections', sa.Text(), nullable=True),
                    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ),
                    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], ),
                    sa.PrimaryKeyConstraint('job_id')
                    )
    # ### end Alembic commands ###
    pipeline_stage_migrator.upgrade()


def downgrade():
    raise NotImplementedError('downgrade is not supported')
